import pandas as pd


def set_options(data, column=""):
    ''' Filters for all or a specific user '''
    items = []
    if isinstance(data, pd.DataFrame):
        try:
            users = data[column].unique()
            for user in users:
                items.append(user)
        except Exception as e:
            print(e)
    return items


class BuildDataFrame():
    ''' Builds user dataframe from log file generated by QT robot 
        Run main() to return dataframe with users
    '''
    def __init__(self,
                 logfile,
                 __columns=[
                     "timestamp",
                     "action",
                     "action_counter",
                     "message",
                     "user"
                 ],
                 __actions=[
                     'interaction_start',
                     'interaction_stop',
                     'recording_start',
                     'recording_stop',
                     'asr_inference_start',
                     'asr_inference_done',
                     'prompt_start',
                     'prompt_done',
                     'robot_start',
                     'robot_gesture',
                     'robot_done'
                 ],
                 __keys=[
                     "user",
                     "total runtime",
                     "recording runtimes",
                     "recording filenames",
                     "asr inference runtimes",
                     "asr results",
                     "user prompts",
                     "prompt runtimes",
                     "prompt results",
                     "robot runtimes",
                     "robot tts",
                     "robot gestures",
                 ],
                 ) -> None:

        self.filename = logfile
        self.columns = __columns
        self.actions = __actions
        self.keys = __keys
        self.log = pd.read_csv(self.filename, names=self.columns)
        self.users = self.__set_users(self.log)

    def __set_users(self, dataframe):
        users = dataframe["user"].unique()
        return users

    def __get_action_timestamp(self, dataframe, action):
        __timestamp = dataframe.loc[dataframe['action']
                                    == action]['timestamp'].item()
        return __timestamp

    def __get_message(self, dataframe, action):
        __message = dataframe.loc[dataframe['action']
                                  == action]['message'].item()
        return __message

    def __set_runtime(self, dataframe, action_start, action_stop):
        __start = self.__get_action_timestamp(dataframe, action_start)
        __stop = self.__get_action_timestamp(dataframe, action_stop)
        runtime = __stop - __start
        return runtime

    def main(self):
        __user_data = []
        for user in self.users:
            # lists
            _rec_runtimes = []
            _rec_filenames = []
            _asr_runtimes = []
            _asr_results = []
            _user_prompts = []
            _prompt_runtimes = []
            _prompt_responses = []
            _robot_runtimes = []
            _robot_says = []
            _robot_gestures = []

            # get variables
            _df = self.log.loc[self.log['user'] == user]
            _total_runtime = self.__set_runtime(
                _df, 'interaction_start', 'interaction_stop')

            for count in _df['action_counter'].unique():
                __df = _df.loc[_df['action_counter'] == count]
                _rec_runtime = self.__set_runtime(
                    __df, 'recording_start', 'recording_done')
                _rec_runtimes.append(_rec_runtime)

                _rec_filename = self.__get_message(__df, 'recording_start')
                _rec_filenames.append(_rec_filename)

                _asr_runtime = self.__set_runtime(
                    __df, 'asr_inference_start', 'asr_inference_done')
                _asr_runtimes.append(_asr_runtime)

                _asr_result = self.__get_message(__df, 'asr_inference_done')
                _asr_results.append(_asr_result)

                _user_prompt = self.__get_message(__df, 'prompt_start')
                _user_prompts.append(_user_prompt)

                _prompt_runtime = self.__set_runtime(
                    __df, 'prompt_start', 'prompt_done')
                _prompt_runtimes.append(_prompt_runtime)

                _prompt_response = self.__get_message(__df, 'prompt_done')
                _prompt_responses.append(_prompt_response)

                _robot_runtime = self.__set_runtime(
                    __df, 'robot_start', 'robot_done')
                _robot_runtimes.append(_robot_runtime)

                _robot_say = self.__get_message(__df, 'robot_start')
                _robot_says.append(_robot_say)

                _robot_gesture = self.__get_message(__df, 'robot_gesture')
                _robot_gestures.append(_robot_gesture)

            __user_dict = {
                'user': user,
                'total runtime': _total_runtime,
                'recording runtimes': _rec_runtimes,
                'recording filenames': _rec_filenames,
                'asr inference runtimes': _asr_runtimes,
                'asr results': _asr_results,
                'user prompts': _user_prompts,
                'prompt runtimes': _prompt_runtimes,
                'prompt results': _prompt_responses,
                'robot runtimes': _robot_runtimes,
                'robot tts': _robot_says,
                'robot gestures': _robot_gestures
            }

            __user_data.append(__user_dict)
    
        df = pd.DataFrame.from_dict(__user_data)

        return df


